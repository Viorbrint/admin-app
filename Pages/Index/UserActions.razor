<div class="d-flex justify-content-between align-items-center mb-3 flex-column flex-sm-row" style="gap: 1em;">
    <div class="d-flex" style="gap: 1em;">
        <button class="btn btn-outline-primary" @onclick="OnBlock">Block</button>
        <button class="btn btn-outline-primary" @onclick="OnUnblock">Unblock</button>
        <button class="btn btn-outline-danger" @onclick="OnDelete">Delete</button>
    </div>
    <div class="input-group d-flex justify-content-between align-items-center" style="gap: 1em;">
        <input type="text" class="form-control" placeholder="Search..." @oninput="DebouncedInput"/>
        <button class="btn btn-outline-dark" @onclick="OnLogout">Logout</button>
        <span>@UserEmail</span>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnBlock { get; set; }
    [Parameter] public EventCallback OnUnblock { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnLogout { get; set; }
    [Parameter] public Action<string> SetFilter { get; set; } = null!;
    [Parameter] public string UserEmail { get; set; } = null!;

    private CancellationTokenSource _cts = new();
    private string _searchText = string.Empty;
    private const int DebounceDelay = 300;

    private async Task DebouncedInput(ChangeEventArgs args)
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();

        try
        {
            _searchText = args.Value?.ToString() ?? string.Empty;

            await Task.Delay(DebounceDelay, _cts.Token);

            SetFilter?.Invoke(_searchText);
        }
        catch (TaskCanceledException)
        {
        }
    }
}
